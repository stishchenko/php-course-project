Перш за все, кидається в очі те, що код при використанні викликів з Фабрики виглядає більш лаконічним та простим для читання.
В той же час, паттерн Стратегія є більш гнучким з точки зору розширення функціональності класів.
Хоча обидва паттерни вирішують завдання оптимізації коду для створення моделей, на мій погляд, поле їх використання видається різним у наступному контексті:
 -Паттерн Фабрика краще використовувати, коли моделі належать до одного типу, як от Тварини, і засади їх діяльності подібні. Сама концепція підштовхує до цього.
 -Паттерн Стратегія буде більш корисним, якщо йдеться про моделі, для яких реаліхація методів суттєво відрізняється, як, наприклад, для алгоритмів сортування, коли залежно від логіки (вважай, стратегії) сортування залежить не тільки кінцевий результат, а й ресурси, витрачені на розв'язання задачі.
Думаю, можна також вважати, що паттерн Фабрика більше підходить для класів моделей, що зберігають дані про об'єкти, з якими працює програма, а паттерн Стратегія краще пасує для роботи з классами, що містять описи дій та процесів.